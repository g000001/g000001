;;;; g000001.ja.lisp -*- Mode: Lisp;-*- 

(cl:in-package :g000001.ja.internal)


(defparameter *japanese-kana-table*
  '((#\あ #\ア #\ｱ) (#\い #\イ #\ｲ) (#\う #\ウ #\ｳ) (#\え #\エ #\ｴ) (#\お #\オ #\ｵ)
    (#\か #\カ #\ｶ) (#\き #\キ #\ｷ) (#\く #\ク #\ｸ) (#\け #\ケ #\ｹ) (#\こ #\コ #\ｺ)
    (#\さ #\サ #\ｻ) (#\し #\シ #\ｼ) (#\す #\ス #\ｽ) (#\せ #\セ #\ｾ) (#\そ #\ソ #\ｿ)
    (#\た #\タ #\ﾀ) (#\ち #\チ #\ﾁ) (#\つ #\ツ #\ﾂ) (#\て #\テ #\ﾃ) (#\と #\ト #\ﾄ)
    (#\な #\ナ #\ﾅ) (#\に #\ニ #\ﾆ) (#\ぬ #\ヌ #\ﾇ) (#\ね #\ネ #\ﾈ) (#\の #\ノ #\ﾉ)
    (#\は #\ハ #\ﾊ) (#\ひ #\ヒ #\ﾋ) (#\ふ #\フ #\ﾌ) (#\へ #\ヘ #\ﾍ) (#\ほ #\ホ #\ﾎ)
    (#\ま #\マ #\ﾏ) (#\み #\ミ #\ﾐ) (#\む #\ム #\ﾑ) (#\め #\メ #\ﾒ) (#\も #\モ #\ﾓ)
    (#\や #\ヤ #\ﾔ) (#\ゆ #\ユ #\ﾕ) (#\よ #\ヨ #\ﾖ)
    (#\ら #\ラ #\ﾗ) (#\り #\リ #\ﾘ) (#\る #\ル #\ﾙ) (#\れ #\レ #\ﾚ) (#\ろ #\ロ #\ﾛ)
    (#\わ #\ワ #\ﾜ) (#\ゐ #\ヰ "ｲ") (#\ゑ #\ヱ "ｴ") (#\を #\ヲ #\ｦ)
    (#\ん #\ン #\ﾝ)
    (#\が #\ガ "ｶﾞ") (#\ぎ #\ギ "ｷﾞ") (#\ぐ #\グ "ｸﾞ") (#\げ #\ゲ "ｹﾞ")
    (#\ご #\ゴ "ｺﾞ") (#\ざ #\ザ "ｻﾞ") (#\じ #\ジ "ｼﾞ") (#\ず #\ズ "ｽﾞ")
    (#\ぜ #\ゼ "ｾﾞ") (#\ぞ #\ゾ "ｿﾞ") (#\だ #\ダ "ﾀﾞ") (#\ぢ #\ヂ "ﾁﾞ")
    (#\づ #\ヅ "ﾂﾞ") (#\で #\デ "ﾃﾞ") (#\ど #\ド "ﾄﾞ") (#\ば #\バ "ﾊﾞ")
    (#\び #\ビ "ﾋﾞ") (#\ぶ #\ブ "ﾌﾞ") (#\べ #\ベ "ﾍﾞ") (#\ぼ #\ボ "ﾎﾞ")
    (#\ぱ #\パ "ﾊﾟ") (#\ぴ #\ピ "ﾋﾟ") (#\ぷ #\プ "ﾌﾟ") (#\ぺ #\ペ "ﾍﾟ")
    (#\ぽ #\ポ "ﾎﾟ")
    (#\ぁ #\ァ #\ｧ) (#\ぃ #\ィ #\ｨ) (#\ぅ #\ゥ #\ｩ) (#\ぇ #\ェ #\ｪ) (#\ぉ #\ォ #\ｫ)
    (#\っ #\ッ #\ｯ)
    (#\ゃ #\ャ #\ｬ) (#\ゅ #\ュ #\ｭ) (#\ょ #\ョ #\ｮ)
    (#\ゎ #\ヮ "ﾜ")
    ("う゛" #\ヴ "ｳﾞ") (nil #\ヵ "ｶ") (nil #\ヶ "ｹ")
    (#\　 #\ ) (#\， #\, #\､) (#\． #\｡) (#\、 #\, #\､) (#\。 #\｡)
    (#\・ nil #\･) (#\： #\:) (#\； #\;) (#\？ #\?) (#\！ #\!) (#\゛ nil #\ﾞ)
    (#\゜ nil #\ﾟ) (#\´ #\') (#\｀ #\`) (#\＾ #\^) (#\＿ #\_) (#\ー #\ｰ #\-)
    (#\— #\-) (#\‐ #\-)
    (#\／ #\/) (#\＼ #\\) (#\〜 #\~)  (#\｜ #\|) (#\‘ #\`) (#\’ #\') (#\“ #\")
    (#\” #\")
    (#\（ #\() (#\） #\)) (#\［ #\[) (#\］ #\]) (#\｛ #\{) (#\｝ #\})
    (#\〈 #\<) (#\〉 #\>) (#\「 nil #\｢) (#\」 nil #\｣)
    (#\＋ #\+) (#\− #\-) (#\＝ #\=) (#\＜ #\<) (#\＞ #\>)
    (#\′ #\') (#\″ #\") (#\￥ #\\) (#\＄ #\$) (#\％ #\%)
    (#\＃ #\#) (#\＆ #\&) (#\＊ #\*) (#\＠ #\@)))


(DEFUN JAPANESE-HANKAKU-CHAR (CHAR)
  (OR (DOLIST (X *JAPANESE-KANA-TABLE*)
        (WHEN (MEMBER CHAR X)
          (RETURN (CAR (LAST X)))))
      CHAR))


(DEFUN JAPANESE-HANKAKU-STRING (STRING)
   (REDUCE (LAMBDA (ANS X)
              (CONCATENATE 'STRING ANS (STRING (JAPANESE-HANKAKU-CHAR X))))
           STRING
           :INITIAL-VALUE ""))


(DEFUN KEBUNRIDGE-WORD (WORD)
  (LET ((LEN (LENGTH WORD)))
    (REDUCE (LAMBDA (ANS X)
              (CONCATENATE 'STRING ANS (STRING X)))
            (CONCATENATE 'STRING
                         (STRING (CHAR WORD 0))
                         (ALEXANDRIA:SHUFFLE (SUBSEQ WORD 1 (1- LEN)))
                         (STRING (CHAR WORD (1- LEN))))
            :INITIAL-VALUE "")))


#|(DEFUN GOOD-MORNING ()
  (TWIT:UPDATE-STATUS
   (JAPANESE-HANKAKU-STRING
    (CONCATENATE 'STRING
                 "お"
                 (KEBUNRIDGE-WORD "はようございま")
                 "す!"))))|#


#|(DEFUN OTSU ()
  (TWIT:UPDATE-STATUS
   (JAPANESE-HANKAKU-STRING
    (CONCATENATE 'STRING
                 "お"
                 (KEBUNRIDGE-WORD "つかれさまで")
                 "す!"))))|#

(defun nkf (vec &optional (outstream *standard-output*))
  (let ((file (format nil "/tmp/~A" (gensym "deleteme-"))))
    (unwind-protect (with-open-file (out file :element-type '(unsigned-byte 8)
                                         :direction :output)
                      (cl:write-sequence vec out)
                      #|(sb-ext:run-program "nkf" (list "-w" file)
                                                 :search t
                      :output outstream)|#
                      (princ (kl:command-output "/usr/bin/nkf" (list "-w" file))
                             outstream))
      (delete-file file))))


(defun decode-jp (octet)
  (let ((string
         (handler-case (babel:octets-to-string octet :encoding :utf-8)
           (error ()
             (handler-case (babel:octets-to-string octet :encoding :cp932)
               (error ()
                 (handler-case (babel:octets-to-string octet :encoding :eucjp)
                   (error () octet))))))))
    (unless (stringp string)
      (setq string (with-output-to-string (out)
                     (nkf string out))))
    (check-type string string)
    string))


;;; 未完成
(defparameter *japanese-tenji-table*
  '((#\あ #\ア #\⠁) (#\い #\イ #\⠃) (#\う #\ウ #\⠉) (#\え #\エ #\⠋) (#\お #\オ #\⠊)
    (#\か #\カ #\⠡) (#\き #\キ #\⠣) (#\く #\ク #\⠩) (#\け #\ケ #\⠫) (#\こ #\コ #\⠪)
    (#\さ #\サ #\⠱) (#\し #\シ #\⠳) (#\す #\ス #\⠹) (#\せ #\セ #\⠻) (#\そ #\ソ #\⠺)
    (#\た #\タ #\⠕) (#\ち #\チ #\⠗) (#\つ #\ツ #\⠝) (#\て #\テ #\⠟) (#\と #\ト #\⠞)
    (#\な #\ナ #\⠅) (#\に #\ニ #\⠇) (#\ぬ #\ヌ #\⠍) (#\ね #\ネ #\⠏) (#\の #\ノ #\⠎)
    (#\は #\ハ #\⠥) (#\ひ #\ヒ #\⠧) (#\ふ #\フ #\⠭) (#\へ #\ヘ #\⠯) (#\ほ #\ホ #\⠮)
    (#\ま #\マ #\⠵) (#\み #\ミ #\⠷) (#\む #\ム #\⠽) (#\め #\メ #\⠿) (#\も #\モ #\⠾)
    (#\や #\ヤ #\⠌)                (#\ゆ #\ユ #\⠬)                 (#\よ #\ヨ #\⠜)
    (#\ら #\ラ #\⠑) (#\り #\リ #\⠓) (#\る #\ル #\⠙) (#\れ #\レ #\⠛) (#\ろ #\ロ #\⠚)
    (#\わ #\ワ #\⠄) (#\ゐ #\ヰ #\⠆)                (#\ゑ #\ヱ #\⠖) (#\を #\ヲ #\⠔)
    (#\ん #\ン #\⠴)
    (#\が #\ガ "⠐⠡") (#\ぎ #\ギ "⠐⠣") (#\ぐ #\グ "⠐⠩") (#\げ #\ゲ "⠐⠋") (#\ご #\ゴ "⠐⠪")
    (#\ざ #\ザ "⠐⠱") (#\じ #\ジ "⠐⠳") (#\ず #\ズ "⠐⠹") (#\ぜ #\ゼ "⠐⠻") (#\ぞ #\ゾ "⠐⠺")
    (#\だ #\ダ "⠐⠕") (#\ぢ #\ヂ "⠐⠗") (#\づ #\ヅ "⠐⠝") (#\で #\デ "⠐⠟") (#\ど #\ド "⠐⠞")
    (#\ば #\バ "⠐⠥") (#\び #\ビ "⠐⠧") (#\ぶ #\ブ "⠐⠭") (#\べ #\ベ "⠐⠯") (#\ぼ #\ボ "⠐⠮")
    (#\ぱ #\パ "⠠⠥") (#\ぴ #\ピ "⠠⠧") (#\ぷ #\プ "⠠⠭") (#\ぺ #\ペ "⠠⠯") (#\ぽ #\ポ "⠠⠮")
    (#\ぁ #\ァ #\ｧ) (#\ぃ #\ィ #\ｨ) (#\ぅ #\ゥ #\ｩ) (#\ぇ #\ェ #\ｪ) (#\ぉ #\ォ #\ｫ)
    (#\っ #\ッ #\⠂)
    (#\ゃ #\ャ #\ｬ) (#\ゅ #\ュ #\ｭ) (#\ょ #\ョ #\ｮ)
    (#\ゎ #\ヮ "ﾜ")
    ("う゛" #\ヴ "ｳﾞ") (nil #\ヵ "ｶ") (nil #\ヶ "ｹ")
    (#\　 #\ ) (#\， #\, #\⠰) (#\． #\⠲) (#\、 #\, #\⠰) (#\。 #\⠲)
    (#\・ nil) (#\： #\:) (#\； #\;) (#\？ #\? #\⠢) (#\！ #\! #\⠖) (#\゛ nil #\ﾞ)
    (#\゜ nil #\ﾟ) (#\´ #\') (#\｀ #\`) (#\＾ #\^) (#\＿ #\_) (#\ー #\ｰ #\⠒)
    (#\— #\-) (#\‐ #\-)
    (#\／ #\/) (#\＼ #\\) (#\〜 #\~)  (#\｜ #\|) (#\‘ #\`) (#\’ #\') (#\“ #\")
    (#\” #\")
    (#\（ #\() (#\） #\)) (#\［ #\[) (#\］ #\]) (#\｛ #\{) (#\｝ #\})
    (#\〈 #\<) (#\〉 #\>) (#\「 nil #\｢) (#\」 nil #\｣)
    (#\＋ #\+) (#\− #\-) (#\＝ #\=) (#\＜ #\<) (#\＞ #\>)
    (#\′ #\') (#\″ #\") (#\￥ #\\) (#\＄ #\$) (#\％ #\%)
    (#\＃ #\#) (#\＆ #\&) (#\＊ #\*) (#\＠ #\@)))


(defvar *youon-table*
  '(("きゃ" "キャ" "⠈⠡")  ("きゅ" "キュ" "⠈⠩")  ("きょ" "キョ" "⠈⠪")
    ("しゃ" "シャ" "⠈⠱")  ("しゅ" "シュ" "⠈⠹")  ("しょ" "ショ" "⠈⠺")
    ("てぃ" "ティ" "⠈⠗")
    ("ちゃ" "チャ" "⠈⠕")  ("ちゅ" "チュ" "⠈⠝")  ("ちぇ" "チェ" "⠈⠟")
    ("ちょ" "チョ" "⠈⠞")
    ("にゃ" "ニャ" "⠈⠅")  ("にゅ" "ニュ" "⠈⠍")  ("にょ" "ニョ" "⠈⠎")
    ("ひゃ" "ヒャ" "⠈⠥")  ("ひゅ" "ヒュ" "⠈⠭")  ("ひょ" "ヒョ" "⠈⠮")
    ("ふぁ" "ファ" "⠢⠥")  ("ふぃ" "フィ" "⠢⠧")  ("ふぇ" "フェ" "⠢⠯")
    ("ふぉ" "フォ" "⠢⠮")
    ("みゃ" "ミャ" "⠈⠵")  ("みゅ" "ミュ" "⠈⠽")  ("みょ" "ミョ" "⠈⠾")
    ("りゃ" "リャ" "⠈⠢")  ("りゅ" "リュ" "⠈⠙")  ("りょ" "リョ" "⠈⠚")
    ("ぎゃ" "ギャ" "⠘⠡")  ("ぎゅ" "ギュ" "⠘⠩")  ("ぎょ" "ギョ" "⠘⠪")
    ("じゃ" "ジャ" "⠘⠱")  ("じゅ" "ジュ" "⠘⠹")  ("じょ" "ジョ" "⠘⠺")
    ("びゃ" "ビャ" "⠘⠥")  ("びゅ" "ビュ" "⠘⠭")  ("びょ" "ビョ" "⠘⠮")
    ("ぴゃ" "ピャ" "⠨⠥")  ("ぴゅ" "ピュ" "⠨⠭")  ("ぴょ" "ピョ" "⠨⠮")))


(defun japanese-tenji-char (char)
  (or (dolist (x *japanese-tenji-table*)
        (when (member char x)
          (return (car (last x)))))
      char))


(defun find-youon-tenji (str)
  (or (some (lambda (x)
              (and (member str x :test #'string=)
                   (car (last x))))
            *youon-table*)
      str))


(defun find-youon (str)
  (or (some (lambda (x)
              (and (member str x :test #'string=)
                   (car x)))
            *youon-table*)
      str))


(defun find-dakuon (str)
  (or (some (lambda (x)
              (and (member str x :test #'string=)
                   (string (car x))))
            *japanese-tenji-table*)
      str))


(defun replace-youon-all (str)
  (ppcre:regex-replace-all ".[ィャュョぃゃゅょ]"
                           ;;--- TODO: escape "⠢ "
                           (cl:string-trim '(#\Space #\Newline #\Tab) str)
                           #'find-youon-tenji
                           :simple-calls 'T))


(defun decode-tenji-youon (str)
  (ppcre:regex-replace-all "[⠈⠢⠘⠨]."
                           (cl:string-trim '(#\Space #\Newline #\Tab) str)
                           #'find-youon
                           :simple-calls 'T))


(defun decode-tenji-dakuon (str)
  (ppcre:regex-replace-all "[⠐⠠]."
                           (cl:string-trim '(#\Space #\Newline #\Tab) str)
                           #'find-dakuon
                           :simple-calls 'T))


(defun decode-tenji-char (char)
  (or (dolist (x *japanese-tenji-table*)
        (when (member char x)
          (return (car x))))
      char))


(defun encode-tenji (string)
   (reduce (lambda (ans x)
              (concatenate 'string ans (string (japanese-tenji-char x))))
           (replace-youon-all string)
           :initial-value ""))


(defun decode-tenji (string)
   (reduce (lambda (ans x)
              (concatenate 'string ans (string (decode-tenji-char x))))
           (decode-tenji-dakuon
            (decode-tenji-youon string))
           :initial-value ""))


(defparameter *sugimoto-table*
  (append '(("ぶりーだー" "ブリーダー")
            ("であつか" "で扱")
            ("すくな" "少な")
            ("みかけない" "見掛けない")
            ("をあつか" "で扱")
            ("ちゅうばん" "中盤")
            ("いちばん" "一番")
            ("けっきょく" "結局")
            ("あたりまで" "辺りまで")
            ("すばらしい" "素晴しい")
            ("ねんまで" "年まで")
            ("ねんから" "年から")
            ("しげき" "刺激")
            ("なんなのか" "何なのか")
            ("きゅうにかわ" "急に変わ")
            ("みようかな" "みようかな")
            ("いっかつ" "一括")
            ("おきた" "起きた")
            ("きょうつう" "共通")
            ("うつくし" "美し")
            ("つつん" "包ん")
            ("つつむ" "包む")
            ("はがす" "剥す")
            ("はがし" "剥し")
            ("もんだい" "問題")
            ("おはなし" "お話し")
            ("おひる" "お昼")
            ("おもふ" "思う")
            ("おもった" "思った")
            ("かんじが" "感じが")
            ("かんじって" "感じって")
            ("かんじに" "感じに")
            ("かんじを" "感じを")
            ("きがして" "気がして")
            ("きがする" "気がする")
            ("きのふ" "昨日")
            ("ぎゅうどん" "牛丼")
            ("くらうぃ" "位")
            ("くらゐ" "位")
            ("けふ" "今日")
            ("けんさく" "検索")
            ("こうほ" "候補")
            ("ふくすう" "複数")
            ("ときには" "時には")
            ("ばあい" "場合")
            ("ごはん" "ご飯")
            ("しょせん" "所詮")
            ("しんぶんはいたつ" "新聞配達")
            ("じしょ" "辞書")
            ("じぶんてきには" "自分的には")
            ("じゅつご" "述語")
            ("たいへん" "大変")
            ("たべ" "食べ")
            ("ためし" "試し")
            ("ちょうふく" "重複")
            ("てきには" "的には")
            ("となり" "隣")
            ("なれて" "慣れて")
            ("なれも" "慣れも")
            ("にゅうりょく" "入力")
            ("はなしか" "話か")
            ("はなしだ" "話だ")
            
            ("ひかく" "比較")
            ("ひらがな" "平仮名")
            ("ひる" "昼")
            ("ふうだ" "風だ")
            ("ふうな" "風な")
            ("ふえてる" "増えてる")
            ("へんかん" "変換")
            ("ほうしき" "方式")
            ("まえより" "前より")
            ("まつや" "松屋")
            ("まよい" "迷い")
            ("まよう" "迷う")
            ("まよっ" "迷っ")
            ("みづ" "水")
            ("もちゐ" "用い")
            ("ゆふがた" "夕方")
            ("わりと" "割と")
            ("をしこう" "を指向")
            ("じたい" "自体")
            ("ぶんけん" "文献")
            ("せってい" "設定")
            ("つかって" "使って")
            ("つかわ" "使わ"))
          '(("すぎもとせんせい" "杉本先生")
            ("ほうしき" "方式")
            ("へんかん" "変換")
            ("おもって" "思って")
            ("むずかしい" "難しい")
            ("あとで" "後で")
            ("ぜんぶ" "全部")
            ("へんかん" "変換")
            ("きぶん" "気分")
            ("けっこう" "結構")
            ("そうかい" "爽快")
            ("なかなか" "中々")
            ("すぎもとだいいちろう" "杉本大一郎")
            ("せんせい" "先生")
            ("かなだけ" "仮名だけ")
            ("うちこんで" "打ち込んで")
            ("ぶんしょう" "文章")
            ("ほんをしっぴつ" "本を執筆")
            ("だいぶたつ" "大分経つ")
            )
          '(("いっこまえ" "一個前")
            ("つぶやき" "呟き")
            ("もじれつちかん" "文字列置換")
            ("このきぼ" "この規模")
            ("めんどくさい" "面倒臭い")
            ("じしょ" "辞書")
            ("できて" "出来て")
            ("らくなの" "楽なの")
            ("いちねんかん" "一年間")
            ("らいねん" "来年")
            ("いちおう、" "一応、")
            ("どんもの" "丼もの")
            ("いがいの" "以外の")
            ("こすぱ" "コスパ")
            ("よくない" "良くない")
            ("のあたい" "の値")
            ("そうさでき" "操作でき")
            ("きどうする" "起動する")
            ("そとに" "外に")
            ("とんでいって" "飛んで行って")
            ("alpha" "α")
            ("かいせつ" "解説")
            ("ほんは" "本は")
            ("ほんだ" "本だ")
            ("おもいこん" "思い込ん")
            ("のほんらしい" "の本らしい")
            ("ほんがでる" "本が出る")
            ("わけないか" "訳ないか")
            ("ほんいっさつ" "本一冊")
            ("かけちゃう" "書けちゃう")
            ("くらゐ" "位")
            ("くらいの" "位の")
            ("ちくせき" "蓄積")
            ("きりかえる" "切り換える")
            ("だいぶ" "大分")
            ("おっくう" "億劫")
            ("おもしろい" "面白い")
            ("まちがって" "間違えて")
            ("さくじょ" "削除")
            ("へんしん" "返信")
            ("よみかえ" "読み返")
            ("かきながら" "書きながら")
            ("ふだんから" "普段から")
            ("ふだん、" "普段、")
            ("かいてみる" "書いてみる")
            ("かんじる" "感じる")
            ("かいてある" "書いてある")
            ("ぶんしょう" "文章")
            ("かいてるとき" "書いている時")
            ("しこうに" "思考に")
            ("えいきょう" "影響")
            ("およぼす" "及ぼす")
            ("きがします" "気がします")
            ("せたがや" "世田谷")
            ("きんじょ" "近所")
            ("はたけ" "畑")
            ("やさい" "野菜")
            ("じはん" "自販")
            ("6こ" "6個")
            ("ゑん" "円")
            ("かってき" "買って来")
            ("くそりぷ" "糞リプ")
            ("わだい" "話題")
            ("はんぶんいじょう" "半分以上")
            ("かきこむ" "書き込む")
            ("あきらめ" "諦め")
            ("ねむい" "眠い")
            ("ねむさ" "眠さ")
            ("からくるの" "から来るの")
            ("ねてる" "寝てる")
            ("ねてる" "寝てる")
            ("ねんだい" "年代")
            ("ばん" "版")
            ("きづいたら" "気付いたら")
            ("じかん" "時間")
            ("ねて" "寝て")
            ("ことし" "今年")
            ("けいきいい" "景気良い")
            ("ひだりうえ" "左上")
            ("けんしゅ" "犬種")
            ("にんき" "人気")
            ("おおがた" "大型")
            ("にほん" "日本")
            ("きてる" "来てる")
            ("おほい" "多い")
            ("かいがい" "海外"))))


(defun kasanejize (str)
  (ppcre:regex-replace-all "[あ-ん]{2}"
                           str
                           (lambda (str)
                             (when (char= (char str 0)
                                          (char str 1) )
                               (setf (elt str 1) #\ゝ))
                             str)
                           :simple-calls 'T))


(defun strans (str)
  (dolist (w *sugimoto-table*)
    (when (search (first w) str)
        (setq str
              (ppcre:regex-replace-all (first w)
                                       str
                                       (second w)))))
  (kasanejize str))


(defparameter *japanese-hentaigana-table*
  '((#\た #\𛁠)
    (#\だ "𛁠゙")
    (#\か #\𛀙)
    (#\が "𛀙゙")
    (#\ま #\𛃄)
    (#\む #\𛃑)
    (#\の #\𛂜)
    (#\こ #\𛀸)
    (#\そ #\𛁗)
    (#\つ #\𛁭)
    (#\せ #\𛁒)
    (#\や #\𛃞)
    (#\は #\𛂦)
    (#\も #\𛃚)
    (#\に #\𛂌)
    (#\ば "𛂦゙")
    (#\な #\𛂁)
    (#\と #\𛁻)
    (#\す #\𛁑)
    (#\け #\𛀳)))

(let ((prev nil))
  (defun string-kana-to-hentaigana (str)
    (with-output-to-string (out)
      (map nil
           (lambda (c)
             (let ((win (cadr (assoc c *japanese-hentaigana-table*))))
               (princ 
                (if win 
                    (if (and (not (null prev))
                             (equal win prev))
                        "ゝ"
                        win)
                    (string c))
                out)
               (setq prev win)))
           str))))

;;; *EOF*


