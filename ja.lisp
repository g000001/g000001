(IN-PACKAGE :G000001)


(defparameter *japanese-kana-table*
  '((#\あ #\ア #\ｱ) (#\い #\イ #\ｲ) (#\う #\ウ #\ｳ) (#\え #\エ #\ｴ) (#\お #\オ #\ｵ)
    (#\か #\カ #\ｶ) (#\き #\キ #\ｷ) (#\く #\ク #\ｸ) (#\け #\ケ #\ｹ) (#\こ #\コ #\ｺ)
    (#\さ #\サ #\ｻ) (#\し #\シ #\ｼ) (#\す #\ス #\ｽ) (#\せ #\セ #\ｾ) (#\そ #\ソ #\ｿ)
    (#\た #\タ #\ﾀ) (#\ち #\チ #\ﾁ) (#\つ #\ツ #\ﾂ) (#\て #\テ #\ﾃ) (#\と #\ト #\ﾄ)
    (#\な #\ナ #\ﾅ) (#\に #\ニ #\ﾆ) (#\ぬ #\ヌ #\ﾇ) (#\ね #\ネ #\ﾈ) (#\の #\ノ #\ﾉ)
    (#\は #\ハ #\ﾊ) (#\ひ #\ヒ #\ﾋ) (#\ふ #\フ #\ﾌ) (#\へ #\ヘ #\ﾍ) (#\ほ #\ホ #\ﾎ)
    (#\ま #\マ #\ﾏ) (#\み #\ミ #\ﾐ) (#\む #\ム #\ﾑ) (#\め #\メ #\ﾒ) (#\も #\モ #\ﾓ)
    (#\や #\ヤ #\ﾔ) (#\ゆ #\ユ #\ﾕ) (#\よ #\ヨ #\ﾖ)
    (#\ら #\ラ #\ﾗ) (#\り #\リ #\ﾘ) (#\る #\ル #\ﾙ) (#\れ #\レ #\ﾚ) (#\ろ #\ロ #\ﾛ)
    (#\わ #\ワ #\ﾜ) (#\ゐ #\ヰ "ｲ") (#\ゑ #\ヱ "ｴ") (#\を #\ヲ #\ｦ)
    (#\ん #\ン #\ﾝ)
    (#\が #\ガ "ｶﾞ") (#\ぎ #\ギ "ｷﾞ") (#\ぐ #\グ "ｸﾞ") (#\げ #\ゲ "ｹﾞ")
    (#\ご #\ゴ "ｺﾞ") (#\ざ #\ザ "ｻﾞ") (#\じ #\ジ "ｼﾞ") (#\ず #\ズ "ｽﾞ")
    (#\ぜ #\ゼ "ｾﾞ") (#\ぞ #\ゾ "ｿﾞ") (#\だ #\ダ "ﾀﾞ") (#\ぢ #\ヂ "ﾁﾞ")
    (#\づ #\ヅ "ﾂﾞ") (#\で #\デ "ﾃﾞ") (#\ど #\ド "ﾄﾞ") (#\ば #\バ "ﾊﾞ")
    (#\び #\ビ "ﾋﾞ") (#\ぶ #\ブ "ﾌﾞ") (#\べ #\ベ "ﾍﾞ") (#\ぼ #\ボ "ﾎﾞ")
    (#\ぱ #\パ "ﾊﾟ") (#\ぴ #\ピ "ﾋﾟ") (#\ぷ #\プ "ﾌﾟ") (#\ぺ #\ペ "ﾍﾟ")
    (#\ぽ #\ポ "ﾎﾟ")
    (#\ぁ #\ァ #\ｧ) (#\ぃ #\ィ #\ｨ) (#\ぅ #\ゥ #\ｩ) (#\ぇ #\ェ #\ｪ) (#\ぉ #\ォ #\ｫ)
    (#\っ #\ッ #\ｯ)
    (#\ゃ #\ャ #\ｬ) (#\ゅ #\ュ #\ｭ) (#\ょ #\ョ #\ｮ)
    (#\ゎ #\ヮ "ﾜ")
    ("う゛" #\ヴ "ｳﾞ") (nil #\ヵ "ｶ") (nil #\ヶ "ｹ")
    (#\　 #\ ) (#\， #\, #\､) (#\． #\｡) (#\、 #\, #\､) (#\。 #\｡)
    (#\・ nil #\･) (#\： #\:) (#\； #\;) (#\？ #\?) (#\！ #\!) (#\゛ nil #\ﾞ)
    (#\゜ nil #\ﾟ) (#\´ #\') (#\｀ #\`) (#\＾ #\^) (#\＿ #\_) (#\ー #\ｰ #\-)
    (#\— #\-) (#\‐ #\-)
    (#\／ #\/) (#\＼ #\\) (#\〜 #\~)  (#\｜ #\|) (#\‘ #\`) (#\’ #\') (#\“ #\")
    (#\” #\")
    (#\（ #\() (#\） #\)) (#\［ #\[) (#\］ #\]) (#\｛ #\{) (#\｝ #\})
    (#\〈 #\<) (#\〉 #\>) (#\「 nil #\｢) (#\」 nil #\｣)
    (#\＋ #\+) (#\− #\-) (#\＝ #\=) (#\＜ #\<) (#\＞ #\>)
    (#\′ #\') (#\″ #\") (#\￥ #\\) (#\＄ #\$) (#\％ #\%)
    (#\＃ #\#) (#\＆ #\&) (#\＊ #\*) (#\＠ #\@)))

(DEFUN JAPANESE-HANKAKU-CHAR (CHAR)
  (OR (DOLIST (X *JAPANESE-KANA-TABLE*)
        (WHEN (MEMBER CHAR X)
          (RETURN (CAR (LAST X)))))
      CHAR))

(DEFUN JAPANESE-HANKAKU-STRING (STRING)
   (REDUCE (LAMBDA (ANS X)
              (CONCATENATE 'STRING ANS (STRING (JAPANESE-HANKAKU-CHAR X))))
           STRING
           :INITIAL-VALUE ""))

(DEFUN KEBUNRIDGE-WORD (WORD)
  (LET ((LEN (LENGTH WORD)))
    (REDUCE (LAMBDA (ANS X)
              (CONCATENATE 'STRING ANS (STRING X)))
            (CONCATENATE 'STRING
                         (STRING (CHAR WORD 0))
                         (ALEXANDRIA:SHUFFLE (SUBSEQ WORD 1 (1- LEN)))
                         (STRING (CHAR WORD (1- LEN))))
            :INITIAL-VALUE "")))

#|(DEFUN GOOD-MORNING ()
  (TWIT:UPDATE-STATUS
   (JAPANESE-HANKAKU-STRING
    (CONCATENATE 'STRING
                 "お"
                 (KEBUNRIDGE-WORD "はようございま")
                 "す!"))))|#


#|(DEFUN OTSU ()
  (TWIT:UPDATE-STATUS
   (JAPANESE-HANKAKU-STRING
    (CONCATENATE 'STRING
                 "お"
                 (KEBUNRIDGE-WORD "つかれさまで")
                 "す!"))))|#


(defun decode-jp (octet)
  (handler-case (babel:octets-to-string octet :encoding :utf-8)
    (error ()
      (handler-case (babel:octets-to-string octet :encoding :cp932)
        (error ()
          (handler-case (babel:octets-to-string octet :encoding :eucjp)
            (error () octet)))))))

;;; 未完成
(defparameter *japanese-tenji-table*
  '((#\あ #\ア #\⠁) (#\い #\イ #\⠃) (#\う #\ウ #\⠉) (#\え #\エ #\⠋) (#\お #\オ #\⠊)
    (#\か #\カ #\⠡) (#\き #\キ #\⠣) (#\く #\ク #\⠩) (#\け #\ケ #\⠫) (#\こ #\コ #\⠪)
    (#\さ #\サ #\⠱) (#\し #\シ #\⠳) (#\す #\ス #\⠹) (#\せ #\セ #\⠻) (#\そ #\ソ #\⠺)
    (#\た #\タ #\⠕) (#\ち #\チ #\⠗) (#\つ #\ツ #\⠝) (#\て #\テ #\⠟) (#\と #\ト #\⠞)
    (#\な #\ナ #\⠅) (#\に #\ニ #\⠇) (#\ぬ #\ヌ #\⠍) (#\ね #\ネ #\⠏) (#\の #\ノ #\⠎)
    (#\は #\ハ #\⠥) (#\ひ #\ヒ #\⠧) (#\ふ #\フ #\⠭) (#\へ #\ヘ #\⠯) (#\ほ #\ホ #\⠮)
    (#\ま #\マ #\⠵) (#\み #\ミ #\⠷) (#\む #\ム #\⠽) (#\め #\メ #\⠿) (#\も #\モ #\⠾)
    (#\や #\ヤ #\⠌)                (#\ゆ #\ユ #\⠬)                 (#\よ #\ヨ #\⠜)
    (#\ら #\ラ #\⠑) (#\り #\リ #\⠓) (#\る #\ル #\⠙) (#\れ #\レ #\⠛) (#\ろ #\ロ #\⠚)
    (#\わ #\ワ #\⠄) (#\ゐ #\ヰ #\⠆)                (#\ゑ #\ヱ #\⠖) (#\を #\ヲ #\⠔)
    (#\ん #\ン #\⠴)
    (#\が #\ガ "⠐⠡") (#\ぎ #\ギ "⠐⠣") (#\ぐ #\グ "⠐⠩") (#\げ #\ゲ "⠐⠋") (#\ご #\ゴ "⠐⠪")
    (#\ざ #\ザ "⠐⠱") (#\じ #\ジ "⠐⠳") (#\ず #\ズ "⠐⠹") (#\ぜ #\ゼ "⠐⠻") (#\ぞ #\ゾ "⠐⠺")
    (#\だ #\ダ "⠐⠕") (#\ぢ #\ヂ "⠐⠗") (#\づ #\ヅ "⠐⠝") (#\で #\デ "⠐⠟") (#\ど #\ド "⠐⠞")
    (#\ば #\バ "⠐⠥") (#\び #\ビ "⠐⠧") (#\ぶ #\ブ "⠐⠭") (#\べ #\ベ "⠐⠯") (#\ぼ #\ボ "⠐⠮")
    (#\ぱ #\パ "⠠⠥") (#\ぴ #\ピ "⠠⠧") (#\ぷ #\プ "⠠⠭") (#\ぺ #\ペ "⠠⠯") (#\ぽ #\ポ "⠠⠮")
    (#\ぁ #\ァ #\ｧ) (#\ぃ #\ィ #\ｨ) (#\ぅ #\ゥ #\ｩ) (#\ぇ #\ェ #\ｪ) (#\ぉ #\ォ #\ｫ)
    (#\っ #\ッ #\⠂)
    (#\ゃ #\ャ #\ｬ) (#\ゅ #\ュ #\ｭ) (#\ょ #\ョ #\ｮ)
    (#\ゎ #\ヮ "ﾜ")
    ("う゛" #\ヴ "ｳﾞ") (nil #\ヵ "ｶ") (nil #\ヶ "ｹ")
    (#\　 #\ ) (#\， #\, #\⠰) (#\． #\⠲) (#\、 #\, #\⠰) (#\。 #\⠲)
    (#\・ nil) (#\： #\:) (#\； #\;) (#\？ #\? #\⠢) (#\！ #\! #\⠖) (#\゛ nil #\ﾞ)
    (#\゜ nil #\ﾟ) (#\´ #\') (#\｀ #\`) (#\＾ #\^) (#\＿ #\_) (#\ー #\ｰ #\⠒)
    (#\— #\-) (#\‐ #\-)
    (#\／ #\/) (#\＼ #\\) (#\〜 #\~)  (#\｜ #\|) (#\‘ #\`) (#\’ #\') (#\“ #\")
    (#\” #\")
    (#\（ #\() (#\） #\)) (#\［ #\[) (#\］ #\]) (#\｛ #\{) (#\｝ #\})
    (#\〈 #\<) (#\〉 #\>) (#\「 nil #\｢) (#\」 nil #\｣)
    (#\＋ #\+) (#\− #\-) (#\＝ #\=) (#\＜ #\<) (#\＞ #\>)
    (#\′ #\') (#\″ #\") (#\￥ #\\) (#\＄ #\$) (#\％ #\%)
    (#\＃ #\#) (#\＆ #\&) (#\＊ #\*) (#\＠ #\@)))

(defvar *youon-table*
  '(("きゃ" "キャ" "⠈⠡")  ("きゅ" "キュ" "⠈⠩")  ("きょ" "キョ" "⠈⠪")
    ("しゃ" "シャ" "⠈⠱")  ("しゅ" "シュ" "⠈⠹")  ("しょ" "ショ" "⠈⠺")
    ("ちゃ" "チャ" "⠈⠕")  ("ちゅ" "チュ" "⠈⠝")  ("ちぇ" "チェ" "⠈⠟")
    ("ちょ" "チョ" "⠈⠞")
    ("にゃ" "ニャ" "⠈⠅")  ("にゅ" "ニュ" "⠈⠍")  ("にょ" "ニョ" "⠈⠎")
    ("ひゃ" "ヒャ" "⠈⠥")  ("ひゅ" "ヒュ" "⠈⠭")  ("ひょ" "ヒョ" "⠈⠮")
    ("ふぁ" "ファ" "⠢⠥")  ("ふぃ" "フィ" "⠢⠧")  ("ふぇ" "フェ" "⠢⠯")
    ("ふぉ" "フォ" "⠢⠮")
    ("みゃ" "ミャ" "⠈⠵")  ("みゅ" "ミュ" "⠈⠽")  ("みょ" "ミョ" "⠈⠾")
    ("りゃ" "リャ" "⠈⠢")  ("りゅ" "リュ" "⠈⠙")  ("りょ" "リョ" "⠈⠚")
    ("ぎゃ" "ギャ" "⠘⠡")  ("ぎゅ" "ギュ" "⠘⠩")  ("ぎょ" "ギョ" "⠘⠪")
    ("じゃ" "ジャ" "⠘⠱")  ("じゅ" "ジュ" "⠘⠹")  ("じょ" "ジョ" "⠘⠺")
    ("びゃ" "ビャ" "⠘⠥")  ("びゅ" "ビュ" "⠘⠭")  ("びょ" "ビョ" "⠘⠮")
    ("ぴゃ" "ピャ" "⠨⠥")  ("ぴゅ" "ピュ" "⠨⠭")  ("ぴょ" "ピョ" "⠨⠮")))

(defun japanese-tenji-char (char)
  (or (dolist (x *japanese-tenji-table*)
        (when (member char x)
          (return (car (last x)))))
      char))

(defun find-youon-tenji (str)
  (some (lambda (x)
          (and (member str x :test #'string=)
               (car (last x))))
        *youon-table*))

(defun find-youon (str)
  (some (lambda (x)
          (and (member str x :test #'string=)
               (car x)))
        *youon-table*))

(defun find-dakuon (str)
  (some (lambda (x)
          (and (member str x :test #'string=)
               (string (car x))))
        *japanese-tenji-table*))

(defun replace-youon-all (str)
  (ppcre:regex-replace-all ".[ィャュョぃゃゅょ]"
                           str
                           #'find-youon-tenji
                           :simple-calls 'T))

(defun decode-tenji-youon (str)
  (ppcre:regex-replace-all "[⠈⠢⠘⠨]."
                           str
                           #'find-youon
                           :simple-calls 'T))

(defun decode-tenji-dakuon (str)
  (ppcre:regex-replace-all "[⠐⠠]."
                           str
                           #'find-dakuon
                           :simple-calls 'T))

(defun decode-tenji (char)
  (or (dolist (x *japanese-tenji-table*)
        (when (member char x)
          (return (car x))))
      char))

(defun japanese-tenji-string (string)
   (reduce (lambda (ans x)
              (concatenate 'string ans (string (japanese-tenji-char x))))
           (replace-youon-all string)
           :initial-value ""))

(defun japanese-tenji-to-hiragana (string)
   (reduce (lambda (ans x)
              (concatenate 'string ans (string (decode-tenji x))))
           (decode-tenji-dakuon
            (decode-tenji-youon string))
           :initial-value ""))


;(japanese-tenji-to-hiragana (japanese-tenji-string "こんにちは、ぴゃぴゃふぉー"))


(defparameter *sugimoto-table*
  '(
    ("いっかつ" "一括")
    ("おきた" "起きた")
    ("きょうつう" "共通")
    ("うつくし" "美し")
    ("つつん" "包ん")
    ("つつむ" "包む")
    ("はがす" "剥す")
    ("はがし" "剥し")
    ("もんだい" "問題")
    ("おはなし" "お話し")
    ("おひる" "お昼")
    ("おもふ" "思う")
    ("おもった" "思った")
    ("かんじが" "感じが")
    ("かんじって" "感じって")
    ("かんじに" "感じに")
    ("かんじを" "感じを")
    ("きがして" "気がして")
    ("きがする" "気がする")
    ("きのふ" "昨日")
    ("ぎゅうどん" "牛丼")
    ("くらうぃ" "位")
    ("くらゐ" "位")
    ("けふ" "今日")
    ("けんさく" "検索")
    ("こうほ" "候補")
    ("ふくすう" "複数")
    ("ときには" "時には")
    ("ばあい" "場合")
    ("ごはん" "ご飯")
    ("しょせん" "所詮")
    ("しんぶんはいたつ" "新聞配達")
    ("じしょ" "辞書")
    ("じぶんてきには" "自分的には")
    ("じゅつご" "述語")
    ("たいへん" "大変")
    ("たべ" "食べ")
    ("ためし" "試し")
    ("ちょうふく" "重複")
    ("てきには" "的には")
    ("となり" "隣")
    ("なれて" "慣れて")
    ("なれも" "慣れも")
    ("にゅうりょく" "入力")
    ("はなしか" "話か")
    ("はなしだ" "話だ")
    ("ばん" "版")
    ("ひかく" "比較")
    ("ひらがな" "平仮名")
    ("ひる" "昼")
    ("ふうだ" "風だ")
    ("ふうな" "風な")
    ("ふえてる" "増えてる")
    ("へんかん" "変換")
    ("ほうしき" "方式")
    ("まえより" "前より")
    ("まつや" "松屋")
    ("まよい" "迷い")
    ("まよう" "迷う")
    ("まよっ" "迷っ")
    ("みづ" "水")
    ("もちゐ" "用い")
    ("ゆふがた" "夕方")
    ("わりと" "割と")
    ("をしこう" "を指向")
    ("じたい" "自体")
    ("ぶんけん" "文献")
    ("せってい" "設定")
    ("つかって" "使って")
    ("つかわ" "使わ")

    ))

(defun kasanejize (str)
  (ppcre:regex-replace-all "[あ-ん]{2}"
                           str
                           (lambda (str)
                             (when (char= (char str 0)
                                          (char str 1) )
                               (setf (char str 1) #\ゝ))
                             str)
                           :simple-calls 'T))

(defun strans (str)
  (dolist (w *sugimoto-table*)
    (when (search (first w) str)
        (setq str
              (ppcre:regex-replace-all (first w)
                                       str
                                       (second w)))))
  (kasanejize str))

(defun tws (&rest args)
  (let ((ok? (mapcar #'strans args)))
    (when (y-or-n-p "~{~A~} " ok?)
      (apply #'tw (mapcar #'strans args))) ))

;;; eof
